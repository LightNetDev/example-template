---
/**
 * Exports LightNet's `getLocalePaths` as Astro's required `getStaticPaths`.
 * This ensures that pages under `[locale]/` are generated for every site
 * language configured in LightNet. Without this, localized routes would
 * not be built at compile time.
 */
export { getLocalePaths as getStaticPaths } from "lightnet/i18n";

import { AstroError } from "astro/errors";
import { getEntry } from "astro:content";
import {
  CategoriesSection,
  HeroSection,
  HighlightSection,
  MediaGallerySection,
  Page,
} from "lightnet/components";
import { getMediaItems } from "lightnet/content";

import eventImage from "../../assets/event.webp";
import heroImage from "../../assets/hero.webp";

/**
 * Fetches the latest media items of type "book".
 *
 * Retrieves all items where `type` is set to "book", ordered by their
 * `dateCreated` field in descending order — ensuring the most recently
 * added books appear first.
 */
const latestBooks = await getMediaItems({
  where: { type: "book" },
  orderBy: "dateCreated",
});

/**
 * Fetch metadata for the "learn-skateboarding" media collection.
 *
 * This includes details such as the title defined in the media-collection entry.
 */
const learnSkateboarding = await getEntry(
  "media-collections",
  "learn-skateboarding"
);

/**
 * If the "learn-skateboarding" collection is not found, throw a descriptive error.
 *
 * This helps prevent rendering issues and allows for graceful error handling.
 */
if (!learnSkateboarding) {
  throw new AstroError("Media Collection 'learn-skateboarding' not found");
}

/**
 * Fetch all media items belonging to the "learn-skateboarding" collection.
 */
const learnSkateboardingItems = await getMediaItems({
  where: { collection: "learn-skateboarding" },
});

/**
 * Shorthand reference to the translation function.
 * Avoids repeatedly accessing `Astro.locals.i18n.t`.
 */
const t = Astro.locals.i18n.t;
---

{
  /*
   * Renders the LightNet page layout.
   * Automatically includes the global site structure—such as the header,
   * navigation menu and other shared UI components.
   *
   * TODO: Populate this homepage with your own content components and sections.
   */
}
<Page>
  {
    /*
     * The hero section is the large banner at the top of the page,
     * featuring an image of two skateboarders, along with the ministry
     * name (SkateNet) and the slogan ("Living faith, building community").
     *
     * Both text elements (title and subtitle) are localized using the `i18n.t` function,
     * adapting to the current site language.
     *
     * TODO: Adjust `titleSize` and `subtitleSize` as needed to fit your translated values,
     * especially if your titles are significantly longer or shorter than the default.
     */
  }
  <HeroSection
    image={heroImage}
    title={t("x.site.title")}
    subtitle={t("x.ministry.slogan")}
    titleSize="xl"
    subtitleSize="lg"
    showSearch={true}
  />

  {
    /*
     * Displays a section showcasing the most recently added books in the library.
     *
     * The section title is localized using `Astro.locals.i18n.t`, and the layout is optimized
     * for presenting book-style media items.
     *
     * Note: `latestBooks` is a variable fetched in the frontmatter (using getMediaItems)
     * and passed into this component to render the latest content.
     */
  }
  <MediaGallerySection
    title={t("x.home.our-latest-books")}
    items={latestBooks}
    layout="book"
  />

  {
    /*
     * Renders a highlight section promoting the upcoming BBQ event.
     *
     * This section includes:
     * - An image representing the event.
     * - A localized title and description.
     * - A call-to-action link that allows users to sign up (via email).
     *
     * All text content is localized using `Astro.locals.i18n.t`.
     */
  }
  <HighlightSection
    image={eventImage}
    title={t("x.home.bbq.title")}
    text={t("x.home.bbq.text")}
    link={{
      href: "mailto:some-email-address-from-the-ministry",
      text: t("x.home.bbq.sign-up-now"),
    }}
  />

  {
    /*
     * Show a carousel of all categories referenced by media items.
     *
     * Clicking a category → navigates to the Search page with that category
     * set as a filter.
     *
     * The section title → links to the locale-specific Categories overview page:
     *   /{Astro.currentLocale}/categories
     *
     * The Categories overview page is implemented in `categories.astro`
     * (located next to this file).
     */
  }
  <CategoriesSection titleHref={`/${Astro.currentLocale}/categories`} />

  {
    /*
     * Renders a media gallery section for the "Learn Skateboarding" collection.
     *
     * The section title is dynamically set using the collection's `label` field.
     *
     * The gallery displays media items using the "video" layout,
     * suitable for tutorial or educational content.
     */
  }
  <MediaGallerySection
    title={t(learnSkateboarding.data.label)}
    items={learnSkateboardingItems}
    layout="video"
  />
</Page>
